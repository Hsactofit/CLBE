"""add document types

Revision ID: 1dc21530c447
Revises: 5a197358a3e3
Create Date: 2025-09-03 15:15:21.756227

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "1dc21530c447"
down_revision: Union[str, Sequence[str], None] = "5a197358a3e3"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "document_type",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(length=100), nullable=False),
        sa.Column("code", sa.String(length=100), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column(
            "sequence", sa.Integer(), server_default=sa.text("0"), nullable=False
        ),
        sa.Column(
            "required", sa.Boolean(), server_default=sa.text("false"), nullable=False
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.add_column(
        "document", sa.Column("inferred_type_id", sa.Integer(), nullable=True)
    )
    op.create_index(
        op.f("ix_document_inferred_type_id"),
        "document",
        ["inferred_type_id"],
        unique=False,
    )
    op.create_foreign_key(
        None, "document", "document_type", ["inferred_type_id"], ["id"]
    )
    op.drop_column("document", "inferred_type")

    # Seed document types per provided list
    op.execute(
        "INSERT INTO document_type (name, description, code, sequence, required) VALUES ('Passport', 'Valid passport', 'us_passport', 1, true)"
    )
    op.execute(
        "INSERT INTO document_type (name, description, code, sequence, required) VALUES ('U.S. Visa', 'Valid U.S. visa', 'us_visa', 2, true)"
    )
    op.execute(
        "INSERT INTO document_type (name, description, code, sequence, required) VALUES ('Proof of Income', 'Current income documentation', 'proof_of_income', 3, true)"
    )
    op.execute(
        "INSERT INTO document_type (name, description, code, sequence, required) VALUES ('Arrival/Departure Record', 'Official record of arrival/departure (I-94)', 'i_94', 4, true)"
    )
    op.execute(
        "INSERT INTO document_type (name, description, code, sequence, required) VALUES ('Employment Offer Letter', 'Job offer letter', 'employment_letter', 5, true)"
    )
    op.execute(
        "INSERT INTO document_type (name, description, code, sequence, required) VALUES ('Resume/CV', 'Current resume/CV', 'resume', 6, true)"
    )
    op.execute(
        "INSERT INTO document_type (name, description, code, sequence, required) VALUES ('School Transcripts', 'Official academic transcripts', 'school_transcripts', 7, false)"
    )
    op.execute(
        "INSERT INTO document_type (name, description, code, sequence, required) VALUES ('Diplomas', 'Academic diplomas', 'diplomas', 8, false)"
    )

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "document",
        sa.Column(
            "inferred_type", sa.VARCHAR(length=100), autoincrement=False, nullable=True
        ),
    )
    op.drop_constraint(None, "document", type_="foreignkey")
    op.drop_index(op.f("ix_document_inferred_type_id"), table_name="document")
    op.drop_column("document", "inferred_type_id")
    op.drop_table("document_type")
    # ### end Alembic commands ###
