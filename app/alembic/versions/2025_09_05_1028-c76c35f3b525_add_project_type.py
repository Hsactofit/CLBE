"""add project type

Revision ID: c76c35f3b525
Revises: 1f05a3c02ee3
Create Date: 2025-09-05 10:28:52.761055

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "c76c35f3b525"
down_revision: Union[str, Sequence[str], None] = "1f05a3c02ee3"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "project_type",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column(
            "sequence", sa.Integer(), server_default=sa.text("0"), nullable=False
        ),
        sa.Column(
            "enabled", sa.Boolean(), server_default=sa.text("true"), nullable=False
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )

    # Seed project types per provided list
    op.execute(
        "INSERT INTO project_type (name, description, sequence, enabled) VALUES ('H-1B Specialty Occupation', 'Temporary worker visa for specialty occupations requiring specialized knowledge', 1, true)"
    )
    op.execute(
        "INSERT INTO project_type (name, description, sequence, enabled) VALUES ('L-1 Intracompany Transfer', 'Transfer executives, managers, or specialized knowledge employees within the same company', 2, false)"
    )
    op.execute(
        "INSERT INTO project_type (name, description, sequence, enabled) VALUES ('TN NAFTA Professional', 'Temporary worker visa for Canadian and Mexican professionals under NAFTA', 3, false)"
    )
    op.execute(
        "INSERT INTO project_type (name, description, sequence, enabled) VALUES ('EB-1 Priority Worker', 'Permanent residence for individuals with extraordinary ability, outstanding professors, or multinational executives', 4, false)"
    )
    op.execute(
        "INSERT INTO project_type (name, description, sequence, enabled) VALUES ('EB-2/EB-3 Employment-Based Green Card', 'Permanent residence for professionals with advanced degrees or skilled workers', 5, false)"
    )
    op.execute(
        "INSERT INTO project_type (name, description, sequence, enabled) VALUES ('O-1 Extraordinary Ability', 'For individuals with extraordinary ability in sciences, arts, education, business, or athletics', 6, false)"
    )
    op.execute(
        "INSERT INTO project_type (name, description, sequence, enabled) VALUES ('Family-Based Green Card', 'Permanent residence for immediate relatives and family preference categories', 7, false)"
    )
    op.execute(
        "INSERT INTO project_type (name, description, sequence, enabled) VALUES ('F-1 Student Visa', 'Temporary visa for academic students in degree or certificate programs', 8, false)"
    )

    # Add type_id first (nullable), then backfill from legacy type values
    op.add_column("project", sa.Column("type_id", sa.Integer(), nullable=True))
    op.create_index(op.f("ix_project_type_id"), "project", ["type_id"], unique=False)
    op.create_foreign_key(None, "project", "project_type", ["type_id"], ["id"])

    # Backfill mapping from old enum values in project.type to the new project_type ids
    op.execute("UPDATE project SET type_id = 7 WHERE type = 'FAMILY_BASED_GREENCARD'")
    op.execute("UPDATE project SET type_id = 3 WHERE type = 'CITIZENSHIP'")
    op.execute(
        "UPDATE project SET type_id = 1 WHERE type = 'EMPLOYMENT_BASED_GREENCARD'"
    )

    op.add_column(
        "project",
        sa.Column(
            "beneficiary_first_name",
            sa.String(length=255),
            nullable=False,
            server_default="",
        ),
    )
    op.add_column(
        "project",
        sa.Column(
            "beneficiary_last_name",
            sa.String(length=255),
            nullable=False,
            server_default="",
        ),
    )
    op.add_column(
        "project", sa.Column("position_title", sa.String(length=255), nullable=True)
    )
    op.add_column(
        "project",
        sa.Column(
            "filing_type",
            sa.Enum(
                "LOTTERY",
                "NEW_FILING",
                "TRANSFER",
                "EXTENSION",
                "AMENDMENT",
                name="projectfilingtype",
                native_enum=False,
            ),
            nullable=False,
            server_default="NEW_FILING",
        ),
    )
    op.add_column("project", sa.Column("deadline", sa.Date(), nullable=True))
    op.add_column(
        "project",
        sa.Column(
            "priority",
            sa.Enum("LOW", "MEDIUM", "HIGH", name="projectpriority", native_enum=False),
            nullable=False,
            server_default="MEDIUM",
        ),
    )
    op.add_column(
        "project", sa.Column("premium_processing", sa.Boolean(), nullable=True)
    )
    op.add_column("project", sa.Column("notes", sa.Text(), nullable=True))

    # Enforce NOT NULL after backfill
    op.alter_column(
        "project",
        "type_id",
        existing_type=sa.Integer(),
        nullable=False,
        existing_nullable=True,
    )

    op.drop_column("project", "type")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "project",
        sa.Column("type", sa.VARCHAR(length=26), autoincrement=False, nullable=False),
    )
    op.drop_constraint(None, "project", type_="foreignkey")
    op.drop_index(op.f("ix_project_type_id"), table_name="project")
    op.drop_column("project", "type_id")
    op.drop_column("project", "notes")
    op.drop_column("project", "premium_processing")
    op.drop_column("project", "priority")
    op.drop_column("project", "deadline")
    op.drop_column("project", "filing_type")
    op.drop_column("project", "position_title")
    op.drop_column("project", "beneficiary_last_name")
    op.drop_column("project", "beneficiary_first_name")
    op.drop_table("project_type")
    # ### end Alembic commands ###
